var io = io ? io : {};
io.mamuso = io.mamuso ? io.mamuso : {};
io.mamuso.config = {};

io.mamuso.tools = {
  
  // -------------------------------------------------------------------
  // Find an object by name in a given scope
  // -------------------------------------------------------------------
  findObjectsByName: function(name,scope) {
    var predicate = NSPredicate.predicateWithFormat("name == %@",name);
    return scope.filteredArrayUsingPredicate(predicate);
  },

  // -------------------------------------------------------------------
  // Find an object by type in a given scope
  // -------------------------------------------------------------------
  findObjectsOfType: function(classType,scope) {
    var predicate = NSPredicate.predicateWithFormat("self isKindOfClass: %@",classType);
    return scope.filteredArrayUsingPredicate(predicate);
  },

  // -------------------------------------------------------------------
  // Get the solid color of a shape
  // -------------------------------------------------------------------
  getColor: function(object) {
    try{
      var fills = object.style().fills();
      if (fills.count() > 0 && fills.firstObject().fillType() == 0) { 
        return "#" + fills.firstObject().color().hexValue().toString();
      }
    } catch (e) {
      return nil;
    }
  },

  // -------------------------------------------------------------------
  // Make slice and export
  // -------------------------------------------------------------------
  sliceAndExport: function(obj, filename) {
    var sliceLayerAncestry = MSImmutableLayerAncestry.ancestryWithMSLayer(obj),
    rect = MSSliceTrimming.trimmedRectForLayerAncestry(sliceLayerAncestry),
    slices = MSExportRequest.exportRequestsFromExportableLayer_inRect_useIDForName(obj, rect, false),
    slice = null;
    if (slices.count() > 0) {
      slice = slices[0];
      slice.scale = io.mamuso.config.scale;
    }
    io.mamuso.config.doc.saveArtboardOrSlice_toFile(slice, filename);
  },

  // -------------------------------------------------------------------
  // Let the user specify a directory
  // -------------------------------------------------------------------
  getDirFromPrompt: function() {
    var panel = [NSOpenPanel openPanel];
    [panel setMessage:"ðŸŽŸ Pick a folder?"];
    [panel setCanChooseDirectories: true];
    [panel setCanChooseFiles: false];
    [panel setCanCreateDirectories: true];
    var defaultDir = io.mamuso.config.doc.fileURL().URLByDeletingLastPathComponent();
    [panel setDirectoryURL:defaultDir];
    if ([panel runModal] == NSOKButton) {
      var message = [panel filename];
      return message;
    } else {
      return null;
    }
  },

  // -------------------------------------------------------------------
  // Import Frameworks
  // -------------------------------------------------------------------
  loadFramework: function(pluginRoot, frameworkName) {
    if (NSClassFromString(frameworkName) == null) {
      var mocha = [Mocha sharedRuntime];
      return [mocha loadFrameworkWithName:frameworkName inDirectory:pluginRoot];
    } else {
      return true;
    }
  },

  // -------------------------------------------------------------------
  // Text to Markdown
  // -------------------------------------------------------------------
  markdownToHTML: function(text) {
    var html = [MMMarkdown HTMLStringWithMarkdown:text extensions:[1 << 0|1 << 3|1 << 5|1 << 6|1 << 8|1 << 9] error:null];
    return html;
  },


  // -------------------------------------------------------------------
  // Exec, from https://github.com/mathieudutour/git-sketch-plugin/blob/master/Git.sketchplugin/Contents/Sketch/shared.cocoascript
  // -------------------------------------------------------------------
  exec: function(command) {
    var task = NSTask.alloc().init();
    var pipe = NSPipe.pipe();
    var errPipe = NSPipe.pipe();

    task.setLaunchPath_(@"/bin/bash");
    task.setArguments_(NSArray.arrayWithObjects_("-c", command, nil));
    task.setStandardOutput_(pipe);
    task.setStandardError_(errPipe);
    task.launch();

    var data = errPipe.fileHandleForReading().readDataToEndOfFile();
    if (data != nil && data.length())
    {
      var message = NSString.alloc().initWithData_encoding_(data, NSUTF8StringEncoding);
      return NSException.raise_format_("failed", message);
    }
    data = pipe.fileHandleForReading().readDataToEndOfFile();
    return NSString.alloc().initWithData_encoding_(data, NSUTF8StringEncoding);
  },

  // -------------------------------------------------------------------
  // SVGo
  // -------------------------------------------------------------------
  svgo: function() {
    var command = NSString.stringWithFormat_("\\export PATH=\"\/usr\/local\/bin\:\$PATH\" && cd \"%@\" && \\svgo --config='{ \"plugins\": [ {\"removeTitle\": true}, { \"removeNonInheritableGroupAttrs\": true }, { \"collapseGroups\": true }, { \"removeAttrs\": { \"attrs\": \"(fill|stroke)\" }} ]}' .\/", io.mamuso.config.basePath);
    var stdout = io.mamuso.tools.exec(command);
    log(stdout);

    // plugins: [ {removeTitle: true}, { removeNonInheritableGroupAttrs: true }, { collapseGroups: true }, { removeAttrs: { attrs: '(fill|stroke)' }} ]

  }
};